<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Option | Breno Ferreira's Blog]]></title>
  <link href="http://brenoferreira.github.io/blog/categories/option/atom.xml" rel="self"/>
  <link href="http://brenoferreira.github.io/"/>
  <updated>2014-02-26T16:29:48-03:00</updated>
  <id>http://brenoferreira.github.io/</id>
  <author>
    <name><![CDATA[Breno Ferreira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tratando Null Values - Parte 2]]></title>
    <link href="http://brenoferreira.github.io/blog/2014/02/26/tratando-null-values-parte-2/"/>
    <updated>2014-02-26T16:24:00-03:00</updated>
    <id>http://brenoferreira.github.io/blog/2014/02/26/tratando-null-values-parte-2</id>
    <content type="html"><![CDATA[<blockquote><p>Veja a parte 1 <a href="http://brenoferreira.github.io/blog/2013/12/23/tratando-null-values-like-a-boss-com-o-tipo-option/">aqui</a></p></blockquote>

<p>Está rolando uma thread no grupo .NET Architects sobre o Null Object Pattern. O assunto começou com uma dúvida sobre como criar mapeamentos do NHibernate com classes que possuem referencias a um Null Object.</p>

<p>Foram dadas algumas respostas, mas a thread continuou com o assunto e dúvidas surgiram sobre: Null Object é Anti-Pattern? Como usar? Non-Nullable References é melhor?</p>

<p>Vou dar algumas opiniões minhas aqui sobre esse assunto.</p>

<h2>É Anti-Pattern?</h2>

<p>Não acho que seja. Mas pode vir a ser. Patterns são coisas que não devem ser abusadas, e é uma linha bem fina sobre quando é necessário e quando não é.</p>

<h3>Algumas reflexões</h3>

<p>Em muitas estruturas de dados, é comum o uso de um &ldquo;Null Object&rdquo;. Por exemplo:</p>

<h4>Listas</h4>

<p>Existe um objeto que representa uma lista vazia. Geralmente é chamado de <code>Nil</code> ou <code>Empty</code>.</p>

<h4>Árvores</h4>

<p>Existe os nós das árvores. Cada um com seu tipo: <code>Node</code> geralmente é o tipo base, e daí existe os tipos <code>Leaf</code>, que representa o último nó de um branch da árvore, e é comum existir o que representa um nó vazio, também chamado de <code>Empty</code> ou <code>Nil</code>. Nós <code>Leaf</code> geralmente usam esse tipo para representar seus sub-nós (que não existem).</p>

<p>Em ambos esses casos, seria melhor ou pior usar um valor <code>null</code> para representar uma lista vazia, ou os filhos de um nó da árvore que não existem? Minha opinião é: seria muito pior. Tornaria o design da API mais feio, e também deixaria o uso da API mais propenso a erros.</p>

<h2>Non-Nullable References</h2>

<p>A ideia é muito boa, mas na prática, não é tão simples assim de se implementar. Na thread postaram links para quatro posts falando sobre o assunto:</p>

<p><a href="http://blogs.msdn.com/b/cyrusn/archive/2005/04/25/411617.aspx">Parte 1</a>
<a href="http://blogs.msdn.com/b/cyrusn/archive/2005/04/25/411630.aspx">Parte 2</a>
<a href="http://blogs.msdn.com/b/cyrusn/archive/2005/04/26/412040.aspx">Parte 3</a>
<a href="http://blogs.msdn.com/b/cyrusn/archive/2005/04/27/412444.aspx">Parte 4</a></p>

<p>O Eric Lippert (ex-membro do time do C#) também <a href="http://blog.coverity.com/2013/11/20/c-non-nullable-reference-types/">postou em seu blog</a> sobre o assunto:</p>

<p>É uma pena, pois acho que nunca veremos isso no C#.</p>

<p>Uma linguagem que tem suporte a esse recurso é <a href="http://confluence.jetbrains.com/display/Kotlin/Null-safety">Kotlin</a>. Kotlin é uma linguagem criada pela Jetbrains, que roda sobre a JVM. Essa é uma das poucas linguagens que eu já vi que se preocupou com isso desde o início.</p>

<h2>Option type</h2>

<p>Já <a href="http://brenoferreira.github.io/blog/2013/12/23/tratando-null-values-like-a-boss-com-o-tipo-option/">postei aqui</a> sobre o assunto. E, como a thread é do .NET Architects, eu e o Abner (trabalha comigo na Lambda3) criamos um <a href="https://github.com/abnerdasdores/CSharp-OptionType">projeto no Github</a> com uma implementação do tipo Option em C#.</p>

<p>Alguns exemplos:</p>

<p>``` csharp
var pessoa = new Pessoa
{</p>

<pre><code>Nome = "Robb Stark"
</code></pre>

<p>};</p>

<p>var optionPessoa = Option.Create(pessoa);</p>

<p>var logradouro = optionPessoa</p>

<pre><code>                    .Map(p =&gt; p.Endereco)
                    .Map(e =&gt; e.Cidade)
                    .GetOrElse("Não informado");
</code></pre>

<p>logradouro.Should().Be(&ldquo;Não informado&rdquo;);
```</p>

<p>``` csharp
var option = Option.From(1);</p>

<p>option.Should().Be(Option.From(1));
```</p>

<p>``` csharp
var option = Option.From<string>(null);</p>

<p>option.Should().Be(Option.None<string>());
```</p>

<p>Inclusive com suporte (inicial) a Linq.</p>

<p>``` csharp
var pessoa = new Pessoa
{</p>

<pre><code>Nome = "Robb Stark"
</code></pre>

<p>};</p>

<p>var res = (from p in Option.From(pessoa)</p>

<pre><code>      from e in p.Endereco.ToOption()
      select e.Cidade).GetOrElse("Sem endereco");
</code></pre>

<p>res.Should().Be(&ldquo;Sem endereco&rdquo;);
```</p>

<p>``` csharp
var pessoa = new Pessoa
{</p>

<pre><code>Nome = "Robb Stark",
Endereco = new Endereco
{
    Cidade = "Winterfell"
}
</code></pre>

<p>};</p>

<p>var res = from p in Option.From(pessoa)</p>

<pre><code>      from e in p.Endereco.ToOption()
      select e.Cidade;
</code></pre>

<p>res.Should().Be(Option.From(&ldquo;Winterfell&rdquo;));</p>

<p>```</p>

<p>O que acham? &ldquo;Linq-To-Option&rdquo; ficou legal?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tratando null values like a boss com o tipo Option]]></title>
    <link href="http://brenoferreira.github.io/blog/2013/12/23/tratando-null-values-like-a-boss-com-o-tipo-option/"/>
    <updated>2013-12-23T20:06:00-02:00</updated>
    <id>http://brenoferreira.github.io/blog/2013/12/23/tratando-null-values-like-a-boss-com-o-tipo-option</id>
    <content type="html"><![CDATA[<p>Um dos pesadelos de todo desenvolvedor, é uma <code>NullPointerException</code>. Tratar objetos que podem conter um valor, ou não, é chato, e muito propenso à erros. Quem nunca esqueceu de fazer um check contra valores nulos?</p>

<p><code>scala
if(value == null) { throw new InvalidArgumentException() }
</code></p>

<p>ou ainda</p>

<p><code>scala
var pessoa = pessoas.find(x =&gt; x.Nome == "Breno")
pessoa.AumentarSalario(100) // NullReferenceException
</code></p>

<p>Seria bom se houvesse alguma maneira de evitar esse tipo de problema de Exceptions serem lançadas por que o desenvolvedor esqueceu de tratar um valor que possivelmente veio nulo.</p>

<p>Desde que comecei a me aventurar pelo mundo de linguagens funcionais, percebi que lá, eu não me preocupava com isso. E isso se devia ao fato de que eu usava um tipo de dados bem interessante: o tipo <code>Option</code>.</p>

<p><code>scala
trait Option[+T] {
  def value:T
  def hasValue:Boolean
}
</code></p>

<p>Como voce pode ver, o tipo Option simplesmente encapsula um valor possivelmente nulo. E existem os tipos concretos, chamados <code>Some</code> e <code>None</code>. Abaixo a declaração de ambos.</p>

<p>``` scala
case class Some<a href="val%20value:T">T</a> extends Option[T] {
  def hasValue = true
}</p>

<p>case object None extends Option[Nothing] {
  def value = throw new Exception(&ldquo;No value&rdquo;)
  def hasValue = false
}
```</p>

<p>E também temos um objeto Option com o método apply que cria um valor do tipo Option com base no valor passado como parâmetro:</p>

<p><code>scala
object Option {
  def apply[A](x: A): Option[A] = if (x == null) None else Some(x)
}
</code></p>

<p>Assim, podemos criar valores do tipo <code>Option</code> da seguinte maneira:</p>

<p><code>scala
val ten = Some(10)
println(ten.value) //10
</code></p>

<p><code>scala
val none = None
println(ten.value) //throws Exception
</code></p>

<p>Como voces podem ver, o encapsulamento do valor é feito, mas ainda sim, podemos cair em uma Exception no caso de tentarmos acessar o <code>value</code> do Option. Quer dizer então que o Option não serve para nada? Não é bem assim.</p>

<p>O poder verdadeiro do Option está em suas higher-order functions <code>map</code> e <code>flatMap</code>. Na definição da trait <code>Option</code>, temos a declaração dos métodos:</p>

<p>``` scala
def flatMap<a href="f:%20T%20=>%20Option[B]">B</a>:Option[B] =
  if(hasValue) f(value) else None</p>

<p>def map<a href="f:%20T%20=>%20B">B</a>:Option[B] =
  flatMap(_ => Option(f(value)))
```</p>

<p>Qual a útilidade desses métodos? Simples:</p>

<ul>
<li>Ter acesso ao valor armazenado no <code>Option</code>, se houver um;</li>
<li>Fazer combinações de valores do tipo <code>Option</code></li>
</ul>


<p>Como assim?</p>

<p>``` scala
val ten = Some(10)
val timesTwo = ten.flatMap(x => Some(x*2))</p>

<p>timesTwo.map(x => println(x)) //20
```</p>

<p>Como vimos, com os métodos <code>flatMap</code> e <code>map</code> podemos acessar o valor contido dentro do <code>Option</code>, também é possível transformar o valor em um outro valor do tipo <code>Option</code>. No exemplo acima, criamos um <code>Some(10)</code> e depois o transformamos, multiplicando o valor por 2. Assim, obtemos um <code>Some(20)</code>. Logo em seguida, usamos o método <code>map</code> para chamarmos o método <code>println</code> que imprime o valor na tela. E o legal é que, caso em alguma chamada a <code>map</code> ou <code>flatMap</code>, apareça um valor <code>null</code>, o resultado vai ser um <code>None</code>. E qualquer chamada a uma dessas funções sobre um valor <code>None</code>, nada irá acontecer, e assim, nenhuma <code>NullReferenceException</code> será lançada. Legal não é?</p>

<p>Também é possível obter o valor contido dentro do <code>Option</code> através de Pattern Matching:</p>

<p><code>scala
val ten = Some(10)
ten match {
  case Some(x) =&gt; println(x)
  case None =&gt; println("Vazio")
}
//10
</code></p>

<p><code>scala
val none = None
none match {
  case Some(x) =&gt; println(x)
  case None =&gt; println("Vazio")
}
//Vazio
</code></p>

<p>Nos exemplos acima, em um caso, o valor é um <code>Some(10)</code>, então ele cai no primeiro caso, e imprime o valor 10. No segundo caso, como é um <code>None</code>, ele cai no segundo caso, e imprime &ldquo;Vazio&rdquo;.</p>

<p>Um exemplo mais &ldquo;mundo real&rdquo; seria:</p>

<p><code>scala
val joao = pessoas.find(p =&gt; p.Nome == "João")//Retorna um Option[Pessoa]
val salarioDoJoao = joao.map(p =&gt; p.Salario) //Retorna um Option[Double]
println(salarioDoJoao.getOrElse(0.0))
</code></p>

<p>No exemplo acima, temos uma lista de pessoas <code>pessoas</code>, e chamamos o método <code>find</code> para tentarmos achar dentro dessa lista, uma pessoa chamada &ldquo;João&rdquo;. Como o João pode não existir dentro da lista, ele retorna um <code>Option[Pessoa]</code>. Daí, pegamos o salário do possível valor do <code>joao</code> com a funcão <code>map</code>. No final, imprimimos o valor do salário. Mas, como o resultado final pode ser um <code>None</code>, chamamos mais uma função interessante chamada <code>getOrElse</code>. O que essa função faz é simples.</p>

<p>``` scala
def getOrElse<a href="default:B">B >: T</a> =
  this match {</p>

<pre><code>case Some(x) =&gt; x
case None =&gt; default
</code></pre>

<p>  }
```</p>

<p>Como podemos ver, ela faz um Pattern Matching sobre o próprio valor, e caso ele seja um <code>Some[T]</code>, retornamos o próprio valor, caso seja um <code>None</code>, retornamos o valor default passado como parâmetro.</p>

<p>Então, no exemplo do João acima, caso o João exista na lista, o seu salário será impresso na tela, caso não, será impresso o valor 0.0.</p>

<p>O legal do <code>Option</code> é que através da definição do seu tipo, e de suas higher-order functions, torna-se difícil uma <code>NullReferenceException</code> ser lançada. Toda vez que alguma função possa retornar um valor nulo, basta retornar um valor do tipo <code>Option[T]</code>, ao invés de simplesmente um valor do tipo <code>T</code>. A partir daí, é só usar as funções <code>map</code> e <code>flatMap</code>, que elas se encarregam de tratar os casos onde o valor for nulo, propagando o <code>None</code> por toda a cadeia de chamadas.</p>
]]></content>
  </entry>
  
</feed>
