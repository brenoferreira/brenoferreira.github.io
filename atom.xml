<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Breno Ferreira's Blog]]></title>
  <link href="http://brenoferreira.github.io/atom.xml" rel="self"/>
  <link href="http://brenoferreira.github.io/"/>
  <updated>2015-01-28T22:26:03-02:00</updated>
  <id>http://brenoferreira.github.io/</id>
  <author>
    <name><![CDATA[Breno Ferreira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Como escrever um bom currículo]]></title>
    <link href="http://brenoferreira.github.io/blog/2015/01/28/como-escrever-um-bom-curriculo/"/>
    <updated>2015-01-28T22:05:00-02:00</updated>
    <id>http://brenoferreira.github.io/blog/2015/01/28/como-escrever-um-bom-curriculo</id>
    <content type="html"><![CDATA[<p>Esses dias uma pessoa me pediu para dar uma olhada no seu currículo e dar minha opinião sobre como melhorá-lo. Como essa não foi a primeira vez que alguém me pediu para fazer isso, e <a href="http://www.hanselman.com/blog/DoTheyDeserveTheGiftOfYourKeystrokes.aspx">tenho um número limitado de keystrokes sobrando</a>, estou escrevendo esse post.</p>

<p>As dicas a seguir são do livro <a href="http://www.amazon.com/The-Google-Resume-Prepare-Microsoft/dp/0470927623">The Google Resume</a>.</p>

<h2>Dica número 1: máximo de 2 páginas</h2>

<p>Quem recebe muitos currículos odeia ler um currículo muito longo. Além disso, se há mais de 2 páginas, é provável que você tenha colocado mais coisa que o necessário. Se voce conseguir colocar tudo em somente uma página, ótimo! Senão, duas páginas é o suficiente.</p>

<p>Se você já cortou tudo que pode, experimente outro template de currículo. Provavelmente no Word ou Pages (OSX) é possível encontrar templates de currículo com uma formatação boa para economizar espaço.
Outra dica é usar serviços que geram um PDF do seu currículo. Voce consegue fazer isso pelo LinkedIn, que irá gerar um currículo baseado nos dados do seu perfil.</p>

<p>Falando em PDF, SEMPRE envie seu currículo nesse formato. Se a pessoa não conseguir ler seu currículo por que não tem o software necessário para abrir o documento, tenha certeza que ela não irá ler. E qualquer pessoa hoje em dia tem um leitor de PDF, seja qual for o dispositivo que ela esteja usando.</p>

<h2>Dica número 2: diga o que você fez que teve impacto positivo</h2>

<p>Na maioria esmagadora dos currículos que já vi, as pessoas listam suas responsabilidades e o que elas faziam no dia a dia. Se você colocou qual a posição que você ocupava na empresa, suas responsabilidades e tarefas diárias podem ser inferiridas sem muito esforço. Ao invés disso, exponha o que você fez que causou um impacto positivo na empresa ou projeto que você trabalhava, e qual impacto foi esse. Assim, a pessoa que está lendo seu currículo irá saber que você consegue fazer coisas que importam e que você pode fazer a diferença.</p>

<h2>Dica número 3: liste no máximo as 3 últimas experiências profissionais relevantes</h2>

<p>Seu currículo não precisa ser seu histórico profissional completo. Não há necessidade de listar aquele estágio de 10 anos atrás. Até três itens são suficientes para expor suas competências.</p>

<p>Não é necessário também listar experiências profissionais que não são relevantes e relacionadas com a vaga que você está concorrendo. Não faz muito sentido dizer que você tem experiência como garçom em restaurante se você está enviando seu currículo para uma vaga de gerente comercial.</p>

<h2>Dica número 4: conhecimentos relevantes</h2>

<p>Da mesma forma que sua experiência profissional, seus conhecimentos técnicos e conquistas acadêmicas também devem ser relevantes. Liste somente sua maior conquista acadêmica (ensino superior, especialização, mestrado ou doutorado), qual a instituição, e período de estudo. Não liste qual colégio você frequentou o ensino médio. Isso não importa.</p>

<h2>Dica número 5: diga por que você seria uma boa contratação</h2>

<p>Logo depois das suas informações pessoais, é bom você dizer o que faz de você uma boa escolha para aquela vaga. Uma ou duas frases são suficientes. Diga quais suas características pessoais, profissionais  e conhecimentos relevantes você possui para que a pessoa lendo seu currículo possa de cara saber se vale a pena continuar lendo.</p>

<p>Seguindo estas regras: um bom currículo segue esse esquema:</p>

<ul>
<li>Suas informações pessoais e contato</li>
<li>Uma ou duas frases sobre por que voce se encaixa nessa vaga (Dica 5)</li>
<li>Experiência profissional (até 3)

<ul>
<li>Empresa, Cargo, Data de inicio, data de término, descrição (Dica 3)</li>
</ul>
</li>
<li>Conhecimentos técnicos e acadêmicos (Dica 4)</li>
</ul>


<p>Era isso, espero que tenha te ajudado a escrever um currículo melhor e que você seja chamado(a) para uma entrevista.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tratando Null Values - Parte 2]]></title>
    <link href="http://brenoferreira.github.io/blog/2014/02/26/tratando-null-values-parte-2/"/>
    <updated>2014-02-26T16:24:00-03:00</updated>
    <id>http://brenoferreira.github.io/blog/2014/02/26/tratando-null-values-parte-2</id>
    <content type="html"><![CDATA[<blockquote><p>Veja a parte 1 <a href="http://brenoferreira.github.io/blog/2013/12/23/tratando-null-values-like-a-boss-com-o-tipo-option/">aqui</a></p></blockquote>

<p>Está rolando uma thread no grupo .NET Architects sobre o Null Object Pattern. O assunto começou com uma dúvida sobre como criar mapeamentos do NHibernate com classes que possuem referencias a um Null Object.</p>

<p>Foram dadas algumas respostas, mas a thread continuou com o assunto e dúvidas surgiram sobre: Null Object é Anti-Pattern? Como usar? Non-Nullable References é melhor?</p>

<p>Vou dar algumas opiniões minhas aqui sobre esse assunto.</p>

<h2>É Anti-Pattern?</h2>

<p>Não acho que seja. Mas pode vir a ser. Patterns são coisas que não devem ser abusadas, e é uma linha bem fina sobre quando é necessário e quando não é.</p>

<h3>Algumas reflexões</h3>

<p>Em muitas estruturas de dados, é comum o uso de um &ldquo;Null Object&rdquo;. Por exemplo:</p>

<h4>Listas</h4>

<p>Existe um objeto que representa uma lista vazia. Geralmente é chamado de <code>Nil</code> ou <code>Empty</code>.</p>

<h4>Árvores</h4>

<p>Existe os nós das árvores. Cada um com seu tipo: <code>Node</code> geralmente é o tipo base, e daí existe os tipos <code>Leaf</code>, que representa o último nó de um branch da árvore, e é comum existir o que representa um nó vazio, também chamado de <code>Empty</code> ou <code>Nil</code>. Nós <code>Leaf</code> geralmente usam esse tipo para representar seus sub-nós (que não existem).</p>

<p>Em ambos esses casos, seria melhor ou pior usar um valor <code>null</code> para representar uma lista vazia, ou os filhos de um nó da árvore que não existem? Minha opinião é: seria muito pior. Tornaria o design da API mais feio, e também deixaria o uso da API mais propenso a erros.</p>

<h2>Non-Nullable References</h2>

<p>A ideia é muito boa, mas na prática, não é tão simples assim de se implementar. Na thread postaram links para quatro posts falando sobre o assunto:</p>

<p><a href="http://blogs.msdn.com/b/cyrusn/archive/2005/04/25/411617.aspx">Parte 1</a>
<a href="http://blogs.msdn.com/b/cyrusn/archive/2005/04/25/411630.aspx">Parte 2</a>
<a href="http://blogs.msdn.com/b/cyrusn/archive/2005/04/26/412040.aspx">Parte 3</a>
<a href="http://blogs.msdn.com/b/cyrusn/archive/2005/04/27/412444.aspx">Parte 4</a></p>

<p>O Eric Lippert (ex-membro do time do C#) também <a href="http://blog.coverity.com/2013/11/20/c-non-nullable-reference-types/">postou em seu blog</a> sobre o assunto:</p>

<p>É uma pena, pois acho que nunca veremos isso no C#.</p>

<p>Uma linguagem que tem suporte a esse recurso é <a href="http://confluence.jetbrains.com/display/Kotlin/Null-safety">Kotlin</a>. Kotlin é uma linguagem criada pela Jetbrains, que roda sobre a JVM. Essa é uma das poucas linguagens que eu já vi que se preocupou com isso desde o início.</p>

<h2>Option type</h2>

<p>Já <a href="http://brenoferreira.github.io/blog/2013/12/23/tratando-null-values-like-a-boss-com-o-tipo-option/">postei aqui</a> sobre o assunto. E, como a thread é do .NET Architects, eu e o Abner (trabalha comigo na Lambda3) criamos um <a href="https://github.com/abnerdasdores/CSharp-OptionType">projeto no Github</a> com uma implementação do tipo Option em C#.</p>

<p>Alguns exemplos:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">pessoa</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Pessoa</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Nome</span> <span class="p">=</span> <span class="s">&quot;Robb Stark&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">optionPessoa</span> <span class="p">=</span> <span class="n">Option</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">pessoa</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">logradouro</span> <span class="p">=</span> <span class="n">optionPessoa</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Endereco</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Cidade</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">GetOrElse</span><span class="p">(</span><span class="s">&quot;Não informado&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">logradouro</span><span class="p">.</span><span class="n">Should</span><span class="p">().</span><span class="n">Be</span><span class="p">(</span><span class="s">&quot;Não informado&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">option</span> <span class="p">=</span> <span class="n">Option</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">option</span><span class="p">.</span><span class="n">Should</span><span class="p">().</span><span class="n">Be</span><span class="p">(</span><span class="n">Option</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="m">1</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">option</span> <span class="p">=</span> <span class="n">Option</span><span class="p">.</span><span class="n">From</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">option</span><span class="p">.</span><span class="n">Should</span><span class="p">().</span><span class="n">Be</span><span class="p">(</span><span class="n">Option</span><span class="p">.</span><span class="n">None</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inclusive com suporte (inicial) a Linq.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">pessoa</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Pessoa</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Nome</span> <span class="p">=</span> <span class="s">&quot;Robb Stark&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">res</span> <span class="p">=</span> <span class="p">(</span><span class="k">from</span> <span class="n">p</span> <span class="k">in</span> <span class="n">Option</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="n">pessoa</span><span class="p">)</span>
</span><span class='line'>          <span class="k">from</span> <span class="n">e</span> <span class="k">in</span> <span class="n">p</span><span class="p">.</span><span class="n">Endereco</span><span class="p">.</span><span class="n">ToOption</span><span class="p">()</span>
</span><span class='line'>          <span class="k">select</span> <span class="n">e</span><span class="p">.</span><span class="n">Cidade</span><span class="p">).</span><span class="n">GetOrElse</span><span class="p">(</span><span class="s">&quot;Sem endereco&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">res</span><span class="p">.</span><span class="n">Should</span><span class="p">().</span><span class="n">Be</span><span class="p">(</span><span class="s">&quot;Sem endereco&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">pessoa</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Pessoa</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Nome</span> <span class="p">=</span> <span class="s">&quot;Robb Stark&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Endereco</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Endereco</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Cidade</span> <span class="p">=</span> <span class="s">&quot;Winterfell&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">res</span> <span class="p">=</span> <span class="k">from</span> <span class="n">p</span> <span class="k">in</span> <span class="n">Option</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="n">pessoa</span><span class="p">)</span>
</span><span class='line'>          <span class="k">from</span> <span class="n">e</span> <span class="k">in</span> <span class="n">p</span><span class="p">.</span><span class="n">Endereco</span><span class="p">.</span><span class="n">ToOption</span><span class="p">()</span>
</span><span class='line'>          <span class="k">select</span> <span class="n">e</span><span class="p">.</span><span class="n">Cidade</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">res</span><span class="p">.</span><span class="n">Should</span><span class="p">().</span><span class="n">Be</span><span class="p">(</span><span class="n">Option</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="s">&quot;Winterfell&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>O que acham? &ldquo;Linq-To-Option&rdquo; ficou legal?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lição aprendida em cenário de alta escalabilidade]]></title>
    <link href="http://brenoferreira.github.io/blog/2014/01/28/licao-aprendida-em-cenario-de-alta-escalabilidade/"/>
    <updated>2014-01-28T22:21:00-02:00</updated>
    <id>http://brenoferreira.github.io/blog/2014/01/28/licao-aprendida-em-cenario-de-alta-escalabilidade</id>
    <content type="html"><![CDATA[<p>Atualmente na Lambda3, estou trabalhando em um projeto que demanda alta performance e escalabilidade, pois terá uma demanda na casa de alguns milhares de usuários simultâneos (em pior caso).</p>

<p>A aplicação, hospedada no Windows Azure, é feita em ASP.NET MVC, que tem um suporte razoável para execução de requests de maneira assíncrona.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="n">Index</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">model</span> <span class="p">=</span> <span class="k">await</span> <span class="p">&lt;</span><span class="k">async</span> <span class="n">expression</span><span class="p">&gt;;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">model</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Então, qualquer chamada que possa demorar, em todo o ciclo de vida do Request, é feito de maneira assíncrona. Chamadas a Banco de Dados (usamos o Azure Table Storage), requisições remotas, entre outras, são todas feitas utilizando o async/await pattern do C#.</p>

<p>Por que isso foi feito? Para não bloquera threads do Thread Pool do IIS. Se toda vez que alguma operação de IO bloqueasse a execução do Request, a thread ficaria bloqueada até o término da operação. E como vamos ter milhares de usuários simultâneos, isso poderia levar à todas as threads disponíveis no Thread Pool do IIS estarem ocupadas, e a aplicação iria parar de responder. Se as operações são executadas de maneira assíncrona, as threads são liberadas assim que a operação inicia, e depois que ela termina, outra thread disponível no Thread Pool é usada para continuar a execução. Assim, nenhuma thread fica bloqueada por muito tempo. Essa é uma das maneiras mais simples (mas não é tão simples assim) de resolver o problema. Node.JS por exemplo, em toda sua API base, só usa operações assíncronas de IO.</p>

<p>Quando conseguimos chegar em um estágio razoavelmente estável da aplicação, começamos a fazer testes de carga, rodamos alguns cenários: com algumas centenas de usuários simultâneos e poucas instâncias (umas 2 ou 3) executando a aplicação. Os resultado foram bons. Conseguimos responder 200 requests simultâneos tranquilamente, com um tempo de resposta razoável, na média de 1-2 segundos.</p>

<p>Mas, quando subimos para 1000 usuários simultâneos e 10 instâncias, os resultados foram muito ruins. A aplicação começou a parar de responder, e tinhamos uma média de tempo de resposta de 10 segundos! Inaceitável.</p>

<p>Por que? Tinhamos feito tudo bonito, async e await para todos os lados. O uso de CPU e de memória nas VMs estava baixo. O que estava acontecendo?</p>

<p>Configuramos o <a href="http://newrelic.com/">New Relic</a> para monitorar a aplicação e o que vimos é que tinha um método do ASP.NET que estava demorando muito para responder: <code>System.Web.HttpApplication.BeginRequest</code>. Uma rápida pesquisa no Google nos levou a algumas possibilidades, e uma delas, era de que esse método estava bloqueando enquando o ASP.NET esperava threads serem liberadas para processar o request.</p>

<p>Durante a caçada ao problema, percebi uma coisa estranha. Tinhamos um mecanismo de gravação de logs na aplicação. Como eram gerados uma quantidade razoável de logs, as vezes durante um único request, eles eram escritos de maneira assíncrona também. Dando uma olhada na implementação de um <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.tracelistener.aspx">TraceListener</a> customizado nosso, vi que no método Flush, esperavamos todas as operações de escrita no log terminarem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Flush</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Task</span><span class="p">.</span><span class="n">WaitAll</span><span class="p">(</span><span class="n">escritasNoLog</span><span class="p">);</span>
</span><span class='line'>    <span class="k">base</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Até aí tudo bem. Como os métodos de escrita de log seguiam o esquema &ldquo;fire-and-forget&rdquo;, o método <code>Flush</code> não fazia muita diferença. Só se em alguma parte do sistema fosse necessário esperar a escrita de operações de Log. O que foi surpresa para mim, é que na configuração de logs da aplicação, a propriedade <code>autoflush</code> estava ligada!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;system.diagnostics&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;trace</span> <span class="na">autoflush=</span><span class="s">&quot;true&quot;</span> <span class="na">indentsize=</span><span class="s">&quot;4&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/system.diagnostics&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou seja, cada vez que era executado um <code>Trace.Write("...")</code> na aplicação, a execução bloqueava esperando a escrita do log terminar. Como isso ocorria com uma certa frequencia, basicamente em todos os requests a execução bloqueava por um determinado período de tempo. Desligada a opção <code>autoflush</code>, feito o deploy novamente, e após a execução dos mesmos testes de carga, o tempo de resposta ficou na média de 1-2 segundos e a aplicação estava respondendo 6 vezes mais requisições durante a execução inteira do teste de carga.</p>

<p>Antes da mudança de configuração, tinhamos um tempo médio de resposta a cada requisição de 10 segundos, e durante o teste de carga (10 minutos), eram executados entre 15 e 20 mil cenários (todo um fluxo de teste com várias interações no sistema). Após desligar o <code>autoflush</code>, o tempo médio de resposta caiu para 1-2 segundos, e era executado, nos mesmos 10 minutos do teste, entre 80 e 90 mil cenarios. Todas as vezes usamos 10 instâncias de VMs do <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dn197896.aspx">tamanho medium</a> do Windows Azure. Os agentes de execução dos testes de carga rodavam localmente em um servidor no nosso escritório em SP.</p>

<h3>Conclusão</h3>

<p>Vimos na prática que bloquear a execução de threads do web server por muito tempo, em um ambiente com uma enorme quantidade de usuários concorrentes vai ser um grande golpe na performance do sistema. É muito bom ver que o pessoal que desenvolve frameworks já está ligado nisso e que isso hoje já não é tão dificil de resolver. Já vi soluções muito boas em frameworks conhecidos nas plataformas .NET (ASP.NET MVC), Node (Express), Scala (Play+Akka, Finagle+Finatra). Esses são alguns que eu conheço. Não sei dizer como andam as coisas no mundo Rails e Django por exemplo.</p>

<p>Claro que nosso cenário ainda não chega perto do problema do Twitter, Facebook, Amazon, etc.. Esses casos são bem mais complexos. Mas, no nosso cenário, bastando a execução assíncrona de IO, conseguimos escalar bem a aplicação para uma quantidade na casa dos milhares de usuários simultâneos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tratando null values like a boss com o tipo Option]]></title>
    <link href="http://brenoferreira.github.io/blog/2013/12/23/tratando-null-values-like-a-boss-com-o-tipo-option/"/>
    <updated>2013-12-23T20:06:00-02:00</updated>
    <id>http://brenoferreira.github.io/blog/2013/12/23/tratando-null-values-like-a-boss-com-o-tipo-option</id>
    <content type="html"><![CDATA[<p>Um dos pesadelos de todo desenvolvedor, é uma <code>NullPointerException</code>. Tratar objetos que podem conter um valor, ou não, é chato, e muito propenso à erros. Quem nunca esqueceu de fazer um check contra valores nulos?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">InvalidArgumentException</span><span class="o">()</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ou ainda</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">pessoa</span> <span class="k">=</span> <span class="n">pessoas</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Nome</span> <span class="o">==</span> <span class="s">&quot;Breno&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">pessoa</span><span class="o">.</span><span class="nc">AumentarSalario</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="c1">// NullReferenceException</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seria bom se houvesse alguma maneira de evitar esse tipo de problema de Exceptions serem lançadas por que o desenvolvedor esqueceu de tratar um valor que possivelmente veio nulo.</p>

<p>Desde que comecei a me aventurar pelo mundo de linguagens funcionais, percebi que lá, eu não me preocupava com isso. E isso se devia ao fato de que eu usava um tipo de dados bem interessante: o tipo <code>Option</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">+T</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">value</span><span class="k">:</span><span class="kt">T</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">hasValue</span><span class="k">:</span><span class="kt">Boolean</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como voce pode ver, o tipo Option simplesmente encapsula um valor possivelmente nulo. E existem os tipos concretos, chamados <code>Some</code> e <code>None</code>. Abaixo a declaração de ambos.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Some</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="k">val</span> <span class="n">value</span><span class="k">:</span><span class="kt">T</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">hasValue</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">None</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">value</span> <span class="k">=</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">Exception</span><span class="o">(</span><span class="s">&quot;No value&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">hasValue</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>E também temos um objeto Option com o método apply que cria um valor do tipo Option com base no valor passado como parâmetro:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Option</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">x</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="nc">None</span> <span class="k">else</span> <span class="nc">Some</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assim, podemos criar valores do tipo <code>Option</code> da seguinte maneira:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">ten</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">ten</span><span class="o">.</span><span class="n">value</span><span class="o">)</span> <span class="c1">//10</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">none</span> <span class="k">=</span> <span class="nc">None</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">ten</span><span class="o">.</span><span class="n">value</span><span class="o">)</span> <span class="c1">//throws Exception</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como voces podem ver, o encapsulamento do valor é feito, mas ainda sim, podemos cair em uma Exception no caso de tentarmos acessar o <code>value</code> do Option. Quer dizer então que o Option não serve para nada? Não é bem assim.</p>

<p>O poder verdadeiro do Option está em suas higher-order functions <code>map</code> e <code>flatMap</code>. Na definição da trait <code>Option</code>, temos a declaração dos métodos:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=&gt;</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span><span class="kt">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">hasValue</span><span class="o">)</span> <span class="n">f</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="k">else</span> <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span><span class="kt">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">flatMap</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">Option</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">value</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Qual a útilidade desses métodos? Simples:</p>

<ul>
<li>Ter acesso ao valor armazenado no <code>Option</code>, se houver um;</li>
<li>Fazer combinações de valores do tipo <code>Option</code></li>
</ul>


<p>Como assim?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">ten</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">timesTwo</span> <span class="k">=</span> <span class="n">ten</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">timesTwo</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="c1">//20</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como vimos, com os métodos <code>flatMap</code> e <code>map</code> podemos acessar o valor contido dentro do <code>Option</code>, também é possível transformar o valor em um outro valor do tipo <code>Option</code>. No exemplo acima, criamos um <code>Some(10)</code> e depois o transformamos, multiplicando o valor por 2. Assim, obtemos um <code>Some(20)</code>. Logo em seguida, usamos o método <code>map</code> para chamarmos o método <code>println</code> que imprime o valor na tela. E o legal é que, caso em alguma chamada a <code>map</code> ou <code>flatMap</code>, apareça um valor <code>null</code>, o resultado vai ser um <code>None</code>. E qualquer chamada a uma dessas funções sobre um valor <code>None</code>, nada irá acontecer, e assim, nenhuma <code>NullReferenceException</code> será lançada. Legal não é?</p>

<p>Também é possível obter o valor contido dentro do <code>Option</code> através de Pattern Matching:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">ten</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="n">ten</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Vazio&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//10</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">none</span> <span class="k">=</span> <span class="nc">None</span>
</span><span class='line'><span class="n">none</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Vazio&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//Vazio</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nos exemplos acima, em um caso, o valor é um <code>Some(10)</code>, então ele cai no primeiro caso, e imprime o valor 10. No segundo caso, como é um <code>None</code>, ele cai no segundo caso, e imprime &ldquo;Vazio&rdquo;.</p>

<p>Um exemplo mais &ldquo;mundo real&rdquo; seria:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">joao</span> <span class="k">=</span> <span class="n">pessoas</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="n">p</span> <span class="k">=&gt;</span> <span class="n">p</span><span class="o">.</span><span class="nc">Nome</span> <span class="o">==</span> <span class="s">&quot;João&quot;</span><span class="o">)</span><span class="c1">//Retorna um Option[Pessoa]</span>
</span><span class='line'><span class="k">val</span> <span class="n">salarioDoJoao</span> <span class="k">=</span> <span class="n">joao</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">p</span> <span class="k">=&gt;</span> <span class="n">p</span><span class="o">.</span><span class="nc">Salario</span><span class="o">)</span> <span class="c1">//Retorna um Option[Double]</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">salarioDoJoao</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="mf">0.0</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>No exemplo acima, temos uma lista de pessoas <code>pessoas</code>, e chamamos o método <code>find</code> para tentarmos achar dentro dessa lista, uma pessoa chamada &ldquo;João&rdquo;. Como o João pode não existir dentro da lista, ele retorna um <code>Option[Pessoa]</code>. Daí, pegamos o salário do possível valor do <code>joao</code> com a funcão <code>map</code>. No final, imprimimos o valor do salário. Mas, como o resultado final pode ser um <code>None</code>, chamamos mais uma função interessante chamada <code>getOrElse</code>. O que essa função faz é simples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">getOrElse</span><span class="o">[</span><span class="kt">B</span> <span class="k">&gt;:</span> <span class="kt">T</span><span class="o">](</span><span class="n">default</span><span class="k">:</span><span class="kt">B</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>  <span class="k">this</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">x</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="n">default</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como podemos ver, ela faz um Pattern Matching sobre o próprio valor, e caso ele seja um <code>Some[T]</code>, retornamos o próprio valor, caso seja um <code>None</code>, retornamos o valor default passado como parâmetro.</p>

<p>Então, no exemplo do João acima, caso o João exista na lista, o seu salário será impresso na tela, caso não, será impresso o valor 0.0.</p>

<p>O legal do <code>Option</code> é que através da definição do seu tipo, e de suas higher-order functions, torna-se difícil uma <code>NullReferenceException</code> ser lançada. Toda vez que alguma função possa retornar um valor nulo, basta retornar um valor do tipo <code>Option[T]</code>, ao invés de simplesmente um valor do tipo <code>T</code>. A partir daí, é só usar as funções <code>map</code> e <code>flatMap</code>, que elas se encarregam de tratar os casos onde o valor for nulo, propagando o <code>None</code> por toda a cadeia de chamadas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meu primeiro post - um meta-post]]></title>
    <link href="http://brenoferreira.github.io/blog/2013/11/20/meu-primeiro-post-um-meta-post/"/>
    <updated>2013-11-20T16:41:00-02:00</updated>
    <id>http://brenoferreira.github.io/blog/2013/11/20/meu-primeiro-post-um-meta-post</id>
    <content type="html"><![CDATA[<p>Olá</p>

<p>Esse já deve ser meu terceiro ou quarto primeiro post em um blog que inicio, depois de tentativas fracassadas em escrever sobre algum assunto, que na época julgava interessante. E, já passei um tempo matutando sobre o que escrever no primeiro post dessa nova empreitada. É bem difícil decidir o assunto do primeiro post, como escrevê-lo e qual mensagem passar. Então, vai lá minha nova tentativa.</p>

<p>Demorei muito para finalmente conseguir passar do primeiro parágrafo deste blog. Entre dúvidas de assuntos e uma certa resistência em digitar as primeiras palavras, acabava desistindo. Até que um dia, me deparei com um livro que me fez acordar para alguns problemas que estava enfrentando.</p>

<p><a href="http://www.amazon.com/The-War-Art-Through-Creative/dp/1936891026"><img src="http://brenoferreira.github.io/images/posts/thewarofart.jpg" alt="The War of Art" /></a></p>

<p>Neste livro, o autor fala sobre alguns assuntos, e um dos principais temas é sobre Resistência, e como ela acaba nos bloqueando de fazer o que a gente quer ou precisa fazer. Abaixo segue dois trechos traduzidos do livro:</p>

<p><em>Resistência infalivelmente vai apontar para o Norte &ndash; isso significa aquela ação ou tarefa que ela quer evitar que façamos. Podemos usar isso. Podemos usá-la como uma bússola. Nós podemos navegar por Resistência, deixando-a nos guiar para aquela ação ou tarefa que devemos seguir antes de todas as outras.</em></p>

<p><em>Regra de ouro: Quanto mais importante uma tarefa ou ação for para a evolução da nossa alma, mais Resistência iremos sentir em perseguí-la.</em></p>

<p>Então, como voces viram pelo primeiro parágrafo deste post, eu me identifiquei bastante por essa idéia. É algo que eu já senti algumas vezes na vida quando queria começar a fazer algo diferente.</p>

<p>E este post é o resultado de uma tentativa de mudança de hábito após começar a ler esse livro. Aqui voce provavelmente vai encontrar coisas sobre diversos assuntos, desde tecnologia, alguns ocasionais reviews de livros que li, opiniões minhas sobre algum assunto, entre outras coisas. Espero ter sucesso! Desejem-me sorte.</p>

<p>Abraços</p>

<p>Breno</p>
]]></content>
  </entry>
  
</feed>
